; Example PICA200 vertex shader

; Uniforms
.fvec WorldViewMtx[4]
.fvec NormalMtx[4]
.fvec ProjMtx[4]
.fvec UvOffsetScale0
.fvec UvOffsetScale1
.fvec UvMaps

; Constants
.constf myconst(0.0, 1.0, -1.0, 0.1)
.constf myconst2(0.3, 0.003922, 0.0, 0.0)
.alias  zeros myconst.xxxx ; Vector full of zeros
.alias  ones  myconst.yyyy ; Vector full of ones
.alias  half  myconst.wwww
.alias  rcp255 myconst2.yyyy ; 1/255.0

; Outputs
.out outpos position
.out outtc0 texcoord0
.out outtc1 texcoord1
.out outtc2 texcoord2
.out outclr color
.out outview view
.out outnq normalquat

; Inputs (defined as aliases for convenience)
.alias inpos v0
.alias intc0 v1
.alias intc1 v2
.alias innrm v3
.alias inclr v4

.proc main
	; Force the w component of inpos to be 1.0
	mov r0.xyz, inpos
	mov r0.w,   ones

	; r1 = WorldViewMtx * inpos
	dp4 r1.x, WorldViewMtx[0], r0
	dp4 r1.y, WorldViewMtx[1], r0
	dp4 r1.z, WorldViewMtx[2], r0
	dp4 r1.w, WorldViewMtx[3], r0
	
	; outview = -r1
	mov outview, -r1
	
	; outpos = ProjMtx * r1
	dp4 outpos.x, ProjMtx[0], r1
	dp4 outpos.y, ProjMtx[1], r1
	dp4 outpos.z, ProjMtx[2], r1
	dp4 outpos.w, ProjMtx[3], r1

	; Set texture coords depending on selection
	add r1, UvOffsetScale0.xyxy, intc0
	mul r1, UvOffsetScale0.zwzw, r1

	add r2, UvOffsetScale1.xyxy, intc1
	mul r2, UvOffsetScale1.zwzw, r2

	mov r3, UvMaps

	; Assign TC0
	cmp zeros, eq, eq, r3.x
	ifc cmp.x
		mov outtc0, r1
	.else
		mov outtc0, r2
	.end
	
	; Assign TC1
	cmp zeros, eq, eq, r3.y
	ifc cmp.x
		mov outtc1, r1
	.else
		mov outtc1, r2
	.end

	; Assign TC2
	cmp zeros, eq, eq, r3.z
	ifc cmp.x
		mov outtc2, r1
	.else
		mov outtc2, r2
	.end

	; outclr = inclr * 1/255.0
	mov r1, inclr
	mov r2, rcp255
	mul r2, r1, r2
	mov outclr, r2

	; Transform normal using inv transpose of ModelViewMtx (NormalMtx)
	dp3 r14.x, NormalMtx[0], innrm
	dp3 r14.y, NormalMtx[1], innrm
	dp3 r14.z, NormalMtx[2], innrm
	dp3 r6.x, r14, r14
	rsq r6.x, r6.x
	mul r14.xyz, r14.xyz, r6.x

	mov r0, myconst.yxxx
	add r4, ones, r14.z
	mul r4, half, r4
	cmp zeros, ge, ge, r4.x
	rsq r4, r4.x
	mul r5, half, r14
	jmpc cmp.x, degenerate

	rcp r0.z, r4.x
	mul r0.xy, r5, r4

degenerate:
	mov outnq, r0

	; We're finished
	end
.end
