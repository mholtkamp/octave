#version 450

#extension GL_ARB_separate_shader_objects : enable

#include "Common.glsl"
#include "PathTraceTypes.glsl"

layout (set = 0, binding = 0) uniform GlobalUniformBuffer 
{
    GlobalUniforms global;
};

layout (set = 1, binding = 0) uniform PathTraceUniformBuffer 
{
	PathTraceUniforms pathTrace;
};

layout(std140, set = 1, binding = 1) buffer BakeVertexData  
{
   LightBakeVertex bakeVertices[];
};

layout(std140, set = 1, binding = 3) buffer LightAverageData 
{
   VertexLightData avgData[];
};

layout (local_size_x = 32) in;
void main()
{
    uint threadIndex = gl_GlobalInvocationID.x;
    uint numVerts = pathTrace.mNumBakeVertices;

    if (threadIndex < numVerts)
    {
        uint vertCount = 0;
        vec3 totalDirect = vec3(0,0,0);
        vec3 totalIndirect = vec3(0,0,0);

        vec3 targetPosition = bakeVertices[threadIndex].mPosition;
        vec3 targetNormal = bakeVertices[threadIndex].mNormal;

        const float thresh = 0.0001;
        const vec3 thresh3 = vec3(thresh, thresh, thresh);

        for (uint i = 0; i < numVerts; ++i)
        {
            LightBakeVertex vert = bakeVertices[i];

            vec3 posDiff = abs(targetPosition - vert.mPosition);
            vec3 normDiff = abs(targetNormal - vert.mNormal);

            bool posEqual = all(lessThan(posDiff, thresh3));
            bool normEqual = all(lessThan(normDiff, thresh3));

            if (posEqual && normEqual)
            {
                totalDirect += vert.mDirectLight.rgb;
                totalIndirect += vert.mIndirectLight.rgb;
                ++vertCount;
            }
        }

        vec3 avgDirectLight = totalDirect / float(vertCount);
        vec3 avgIndirectLight = totalIndirect / float(vertCount);

        avgData[threadIndex].mDirectLight = vec4(avgDirectLight, 1.0);
        avgData[threadIndex].mIndirectLight = vec4(avgIndirectLight, 1.0);
    }
}
