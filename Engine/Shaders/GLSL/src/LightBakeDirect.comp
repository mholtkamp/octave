#version 450

#extension GL_ARB_separate_shader_objects : enable

#include "Common.glsl"
#include "PathTraceTypes.glsl"

layout (set = 0, binding = 0) uniform GlobalUniformBuffer 
{
    GlobalUniforms global;
};

layout (set = 1, binding = 0) uniform PathTraceUniformBuffer 
{
	PathTraceUniforms pathTrace;
};

layout(std140, set = 1, binding = 1) buffer RtTriangleData  
{
   PathTraceTriangle triangles[];
};

layout(std140, set = 1, binding = 2) buffer RtMeshData  
{
   PathTraceMesh meshes[];
};

layout(std140, set = 1, binding = 3) buffer RtLightData  
{
   PathTraceLight lights[];
};

layout (set = 1, binding = 4) uniform sampler2D textures[PATH_TRACE_MAX_TEXTURES];

layout(std140, set = 1, binding = 6) buffer BakeVertexData  
{
   LightBakeVertex bakeVertices[];
};

#include "PathTraceCommon.glsl"

layout (local_size_x = 32) in;
void main()
{
    uint threadIndex = gl_GlobalInvocationID.x;
    uint rngState = threadIndex + (global.mFrameNumber * 719393);


    if (threadIndex < pathTrace.mNumBakeVertices)
    {
        PathTraceMesh mesh = meshes[pathTrace.mBakeMeshIndex];
        LightBakeVertex bakeVert = bakeVertices[threadIndex];

        vec3 totalLight = vec3(0,0,0);

        for (int i = 0; i < pathTrace.mNumLights; ++i)
        {
            PathTraceLight light = lights[i];

            if (light.mLightType == PATH_TRACE_LIGHT_POINT)
            {
                vec3 toLight = light.mPosition - bakeVert.mPosition;
                float dist2 = dot(toLight, toLight);

                // Light is out of bounds
                if (dist2 > (light.mRadius * light.mRadius))
                {
                    continue;
                }

                float dist = sqrt(dist2);
                vec3 L = toLight / dist;
                vec3 N = bakeVert.mNormal;

                // Check if the light is being obstructed
                if (light.mCastShadows != 0)
                {
                    // Trace a ray from the light position to the bake vertex position
                    Ray ray;
                    ray.mOrigin = light.mPosition;
                    ray.mDirection = -L;

                    HitInfo hit = CalculateRayCollision(ray, true);

                    if (hit.mHit && hit.mDistance < (dist - pathTrace.mShadowBias))
                    {
                        // We hit something closer than the light. This light is being shadowed by something.
                        continue;
                    }
                }

                float attenuation =  1.0 - clamp(dist / light.mRadius, 0.0, 1.0);
                float intensity = CalcLightIntensity(N, L, mesh.mMaterial.mWrapLighting);
                vec3 lightColor = (intensity * attenuation * light.mColor).rgb;

                const float power = 1.0 / 2.0;
                lightColor = pow(lightColor, vec3(power, power, power));

                totalLight += lightColor;
            }
            else if (light.mLightType == PATH_TRACE_LIGHT_DIRECTIONAL)
            {
                vec3 L = -normalize(light.mDirection);
                vec3 N = bakeVert.mNormal;

                // Check if the light is being obstructed
                if (light.mCastShadows != 0)
                {
                    const float traceDistance = 10000.0;

                    // Trace a ray from very far away toward vertex.
                    Ray ray;
                    ray.mOrigin = bakeVert.mPosition + L * traceDistance;
                    ray.mDirection = -L;

                    HitInfo hit = CalculateRayCollision(ray, true);

                    if (hit.mHit && hit.mDistance < (traceDistance - pathTrace.mShadowBias))
                    {
                        // We hit something closer than the light. This light is being shadowed by something.
                        continue;
                    }
                }

                float intensity = CalcLightIntensity(N, L, mesh.mMaterial.mWrapLighting);
                totalLight += (intensity * light.mColor).rgb;
            }
        }

        bakeVertices[threadIndex].mDirectLight = vec4(totalLight, 1.0);
    }
}
