#version 450

#extension GL_ARB_separate_shader_objects : enable

#include "Common.glsl"
#include "RayTraceTypes.glsl"

layout (set = 0, binding = 0) uniform GlobalUniformBuffer 
{
    GlobalUniforms global;
};

layout (set = 1, binding = 0) uniform RayTraceUniformBuffer 
{
	RayTraceUniforms rayTrace;
};

layout(std140, set = 1, binding = 1) buffer BakeVertexData  
{
   LightBakeVertex bakeVertices[];
};

layout(std140, set = 1, binding = 2) buffer DiffuseTriangleData 
{
   DiffuseTriangle triangles[];
};

layout(std140, set = 1, binding = 3) buffer LightAverageData 
{
   VertexLightData avgData[];
};

layout (local_size_x = 32) in;
void main()
{
    uint threadIndex = gl_GlobalInvocationID.x;
    uint numVerts = rayTrace.mNumBakeVertices;
    uint numTriangles = rayTrace.mNumBakeTriangles;

    if (threadIndex < numVerts)
    {
        bool diffuseDirect = (rayTrace.mDiffuseDirect != 0);
        bool diffuseIndirect = (rayTrace.mDiffuseIndirect != 0);

        uint vertCount = 0;
        vec3 totalDirect = vec3(0,0,0);
        vec3 totalIndirect = vec3(0,0,0);

        vec3 srcDirect = avgData[threadIndex].mDirectLight.rgb;
        vec3 srcIndirect = avgData[threadIndex].mIndirectLight.rgb;

        // Add this own thread's vert data to the totals
        ++vertCount;
        totalDirect = srcDirect;
        totalIndirect = srcIndirect;

        for (uint i = 0; i < numTriangles; ++i)
        {
            bool isThreadTri = false;
            DiffuseTriangle tri = triangles[i];

            for (uint v = 0; v < 3; ++v)
            {
                if (tri.mVertexIndices[v] == threadIndex)
                {
                    isThreadTri = true;
                    break;
                }
            }

            // This thread's vertex is contained in the triangle, so add the other verts' lighting values.
            if (isThreadTri)
            {
                for (uint v = 0; v < 3; ++v)
                {
                    if (tri.mVertexIndices[v] != threadIndex)
                    {
                        uint vertIndex = tri.mVertexIndices[v];
                        totalDirect += avgData[vertIndex].mDirectLight.rgb;
                        totalIndirect += avgData[vertIndex].mIndirectLight.rgb;
                        ++vertCount;
                    }
                }
            }
        }

        vec3 avgDirect = srcDirect;
        vec3 avgIndirect = srcIndirect;

        if (diffuseDirect)
        {
            avgDirect = totalDirect / vertCount;
        }

        if (diffuseIndirect)
        {
            avgIndirect = totalIndirect / vertCount;
        }

        bakeVertices[threadIndex].mDirectLight = vec4(avgDirect, 1.0);
        bakeVertices[threadIndex].mIndirectLight = vec4(avgIndirect, 1.0);
    }
}
