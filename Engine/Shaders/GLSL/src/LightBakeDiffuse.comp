#version 450

#extension GL_ARB_separate_shader_objects : enable

#include "Common.glsl"
#include "PathTraceTypes.glsl"

layout (set = 0, binding = 0) uniform GlobalUniformBuffer 
{
    GlobalUniforms global;
};

layout (set = 1, binding = 0) uniform PathTraceUniformBuffer 
{
	PathTraceUniforms pathTrace;
};

layout(std140, set = 1, binding = 1) buffer BakeVertexData  
{
   LightBakeVertex bakeVertices[];
};

layout(std140, set = 1, binding = 2) buffer DiffuseTriangleData 
{
   DiffuseTriangle triangles[];
};

layout(std140, set = 1, binding = 3) buffer LightAverageData 
{
   VertexLightData avgData[];
};

layout (local_size_x = 32) in;
void main()
{
    uint threadIndex = gl_GlobalInvocationID.x;
    uint numVerts = pathTrace.mNumBakeVertices;

    if (threadIndex < numVerts)
    {
        uint vertCount = 0;
        vec3 totalDirect = avgData[threadIndex].mDirectLight.rgb;
        vec3 totalIndirect = avgData[threadIndex].mIndirectLight.rgb;

        bakeVertices[threadIndex].mDirectLight = vec4(totalDirect, 1.0);
        bakeVertices[threadIndex].mIndirectLight = vec4(totalIndirect, 1.0);
    }
}
